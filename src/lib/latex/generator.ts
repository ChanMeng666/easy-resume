/**
 * LaTeX Resume Generator
 * Converts ResumeData to moderncv LaTeX code
 */

import { ResumeData } from '@/lib/validation/schema';
import {
  escapeLaTeX,
  formatDateRange,
  arrayToLatexItemize,
  splitName,
  networkToSocialType,
} from './utils';

/**
 * Generate complete LaTeX code from resume data
 */
export function generateLatexCode(data: ResumeData): string {
  const sections = [
    generatePreamble(),
    generatePersonalInfo(data.basics),
    '\\begin{document}',
    '\\makecvtitle',
    '',
    generateSummary(data.basics.summary),
    generateEducationSection(data.education),
    generateExperienceSection(data.work),
    generateProjectsSection(data.projects),
    generateSkillsSection(data.skills),
    generateAchievementsSection(data.achievements),
    generateCertificationsSection(data.certifications),
    '\\end{document}',
  ];

  return sections.filter(Boolean).join('\n\n');
}

/**
 * Generate LaTeX preamble (document class and packages)
 */
function generatePreamble(): string {
  return `% LaTeX Resume - Generated by Easy Resume
% Compile with pdflatex or xelatex

\\documentclass[11pt,a4paper,sans]{moderncv}

% Modern CV style and color
\\moderncvstyle{banking}
\\moderncvcolor{blue}

% Character encoding
\\usepackage[utf8]{inputenc}

% Adjust page margins
\\usepackage[scale=0.85]{geometry}

% Ensure proper rendering of special characters
\\usepackage[T1]{fontenc}`;
}

/**
 * Generate personal information section
 */
function generatePersonalInfo(basics: ResumeData['basics']): string {
  const { firstName, lastName } = splitName(basics.name);

  const lines: string[] = [
    `% Personal Information`,
    `\\name{${escapeLaTeX(firstName)}}{${escapeLaTeX(lastName)}}`,
    `\\title{${escapeLaTeX(basics.label)}}`,
  ];

  // Add location if available
  if (basics.location) {
    lines.push(`\\address{${escapeLaTeX(basics.location)}}{}{}`);
  }

  // Add contact information
  if (basics.phone) {
    lines.push(`\\phone[mobile]{${escapeLaTeX(basics.phone)}}`);
  }

  if (basics.email) {
    lines.push(`\\email{${basics.email}}`);
  }

  // Add social profiles
  basics.profiles.forEach((profile) => {
    const socialType = networkToSocialType(profile.network);
    const identifier = profile.label || profile.url.replace(/^https?:\/\//, '').replace(/\/$/, '');

    if (socialType === 'homepage') {
      lines.push(`\\homepage{${identifier}}`);
    } else {
      lines.push(`\\social[${socialType}]{${escapeLaTeX(identifier)}}`);
    }
  });

  return lines.join('\n');
}

/**
 * Generate summary/introduction section
 */
function generateSummary(summary?: string): string {
  if (!summary) return '';

  return `\\section{Summary}
${escapeLaTeX(summary)}`;
}

/**
 * Generate education section
 */
function generateEducationSection(education: ResumeData['education']): string {
  if (!education || education.length === 0) return '';

  const entries = education.map((edu) => {
    const dateRange = formatDateRange(edu.startDate, edu.endDate);
    const degree = `${edu.studyType} of ${edu.area}`;
    const details: string[] = [];

    if (edu.note) {
      details.push(edu.note);
    }

    if (edu.gpa) {
      details.push(`GPA: ${edu.gpa}`);
    }

    const detailsStr = details.length > 0 ? details.join(', ') : '';

    return `\\cventry{${dateRange}}{${escapeLaTeX(degree)}}{${escapeLaTeX(edu.institution)}}{${escapeLaTeX(edu.location)}}{}{${escapeLaTeX(detailsStr)}}`;
  });

  return `\\section{Education}\n${entries.join('\n')}`;
}

/**
 * Generate work experience section
 */
function generateExperienceSection(work: ResumeData['work']): string {
  if (!work || work.length === 0) return '';

  const entries = work.map((job) => {
    const dateRange = formatDateRange(job.startDate, job.endDate);
    const highlights = job.highlights && job.highlights.length > 0
      ? '\n' + arrayToLatexItemize(job.highlights)
      : '';

    return `\\cventry{${dateRange}}{${escapeLaTeX(job.position)}}{${escapeLaTeX(job.company)}}{${escapeLaTeX(job.location)}}{${escapeLaTeX(job.type)}}{${highlights}}`;
  });

  return `\\section{Experience}\n${entries.join('\n\n')}`;
}

/**
 * Generate projects section
 */
function generateProjectsSection(projects: ResumeData['projects']): string {
  if (!projects || projects.length === 0) return '';

  const entries = projects.map((project) => {
    const urlPart = project.url ? `\\url{${project.url}}` : '';
    const highlights = project.highlights && project.highlights.length > 0
      ? '\n' + arrayToLatexItemize(project.highlights)
      : '';

    return `\\cventry{}{${escapeLaTeX(project.name)}}{${escapeLaTeX(project.description)}}{${urlPart}}{}{${highlights}}`;
  });

  return `\\section{Projects}\n${entries.join('\n\n')}`;
}

/**
 * Generate skills section
 */
function generateSkillsSection(skills: ResumeData['skills']): string {
  if (!skills || skills.length === 0) return '';

  const entries = skills.map((skill) => {
    const keywords = skill.keywords.join(', ');
    return `\\cvitem{${escapeLaTeX(skill.name)}}{${escapeLaTeX(keywords)}}`;
  });

  return `\\section{Skills}\n${entries.join('\n')}`;
}

/**
 * Generate achievements section
 */
function generateAchievementsSection(achievements: string[]): string {
  if (!achievements || achievements.length === 0) return '';

  const items = achievements.map(achievement => `\\item ${escapeLaTeX(achievement)}`).join('\n');

  return `\\section{Achievements}
\\begin{itemize}
${items}
\\end{itemize}`;
}

/**
 * Generate certifications section
 */
function generateCertificationsSection(certifications: string[]): string {
  if (!certifications || certifications.length === 0) return '';

  const items = certifications.map(cert => `\\item ${escapeLaTeX(cert)}`).join('\n');

  return `\\section{Certifications}
\\begin{itemize}
${items}
\\end{itemize}`;
}

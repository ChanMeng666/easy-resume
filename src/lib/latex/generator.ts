/**
 * LaTeX Resume Generator
 * Converts ResumeData to custom two-column LaTeX resume using standard packages
 */

import { ResumeData } from '@/lib/validation/schema';
import {
  escapeLaTeX,
  formatDateRange,
  arrayToCompactItemize,
  cleanURL,
  escapeURL,
} from './utils';

/**
 * Generate complete LaTeX code from resume data
 */
export function generateLatexCode(data: ResumeData): string {
  const sections = [
    generatePreamble(),
    '\\begin{document}',
    '',
    generateHeader(data.basics),
    '',
    '% Start two-column layout',
    '\\columnratio{0.6}',
    '\\setlength{\\columnsep}{1.5em}',
    '\\begin{paracol}{2}',
    '',
    '% LEFT COLUMN - Main Content',
    generateSummary(data.basics.summary),
    generateExperienceSection(data.work),
    generateProjectsSection(data.projects),
    '',
    '% Switch to RIGHT COLUMN - Sidebar',
    '\\switchcolumn',
    '',
    generateEducationSection(data.education),
    generateSkillsSection(data.skills),
    generateAchievementsSection(data.achievements),
    generateCertificationsSection(data.certifications),
    '',
    '\\end{paracol}',
    '\\end{document}',
  ];

  return sections.filter(Boolean).join('\n\n');
}

/**
 * Generate LaTeX preamble (document class and packages)
 */
function generatePreamble(): string {
  return `% LaTeX Resume - Generated by Easy Resume
% Compile with pdflatex or xelatex
% Custom two-column layout using standard packages

\\documentclass[10pt,a4paper]{article}

% Page layout
\\usepackage[left=1.25cm,right=1.25cm,top=1.5cm,bottom=1.5cm]{geometry}

% Fonts and text formatting
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{lmodern}
\\usepackage{microtype}

% Colors
\\usepackage[dvipsnames]{xcolor}
\\definecolor{PrimaryColor}{HTML}{0E5484}
\\definecolor{AccentColor}{HTML}{2E86AB}
\\definecolor{TextColor}{HTML}{2E2E2E}
\\definecolor{LightGrey}{HTML}{666666}

% Icons (FontAwesome)
\\usepackage{fontawesome5}

% Links
\\usepackage{hyperref}
\\hypersetup{
    colorlinks=true,
    linkcolor=AccentColor,
    urlcolor=AccentColor,
    pdftitle={Resume},
    pdfauthor={Easy Resume}
}

% Two-column layout
\\usepackage{paracol}

% Lists
\\usepackage{enumitem}
\\setlist{nosep,leftmargin=*}
\\setlist[itemize]{label=\\textbullet,itemsep=0.1em,parsep=0em,topsep=0.3em}

% Section formatting
\\usepackage{titlesec}
\\titleformat{\\section}
  {\\color{PrimaryColor}\\Large\\bfseries\\uppercase}
  {}{0em}{}[\\color{AccentColor}\\titlerule]
\\titlespacing*{\\section}{0pt}{1.5ex}{1ex}

\\titleformat{\\subsection}
  {\\color{TextColor}\\large\\bfseries}
  {}{0em}{}
\\titlespacing*{\\subsection}{0pt}{1ex}{0.5ex}

% Remove page numbers
\\pagestyle{empty}

% Paragraph settings
\\setlength{\\parindent}{0pt}
\\setlength{\\parskip}{0.3em}

% Custom commands for resume elements
\\newcommand{\\cvname}[1]{%
  {\\Huge\\bfseries\\color{TextColor}#1}\\\\[0.3em]
}

\\newcommand{\\cvtitle}[1]{%
  {\\large\\color{PrimaryColor}#1}\\\\[0.8em]
}

\\newcommand{\\cvcontact}[1]{%
  {\\small\\color{LightGrey}#1}
}

\\newcommand{\\cvevent}[4]{%
  \\textbf{\\color{TextColor}#1}\\\\
  {\\color{PrimaryColor}\\textit{#2}}\\\\
  {\\small\\color{LightGrey}#3 \\textbar\\ #4}\\\\[0.3em]
}

\\newcommand{\\cvdivider}{%
  \\vspace{0.5em}
  {\\color{AccentColor!30}\\hrule}
  \\vspace{0.5em}
}

\\newcommand{\\cvtag}[1]{%
  \\colorbox{AccentColor!15}{\\color{TextColor}\\small\\textbf{#1}}\\space%
}

\\newcommand{\\cvsubsection}[1]{%
  \\vspace{0.5em}
  {\\color{PrimaryColor}\\textbf{\\uppercase{#1}}}\\\\[0.3em]
}`;
}

/**
 * Generate header with personal information
 */
function generateHeader(basics: ResumeData['basics']): string {
  const lines: string[] = [
    '% Header',
    `\\cvname{${escapeLaTeX(basics.name)}}`,
    `\\cvtitle{${escapeLaTeX(basics.label)}}`,
    '',
    '\\cvcontact{',
  ];

  const contactParts: string[] = [];

  if (basics.email) {
    contactParts.push(`  \\faEnvelope\\ \\href{mailto:${basics.email}}{${basics.email}}`);
  }

  if (basics.phone) {
    contactParts.push(`  \\faPhone\\ ${escapeLaTeX(basics.phone)}`);
  }

  if (basics.location) {
    contactParts.push(`  \\faMapMarker\\ ${escapeLaTeX(basics.location)}`);
  }

  // Add social profiles
  basics.profiles.forEach((profile) => {
    const cleanUrl = cleanURL(profile.url);
    const label = profile.label || cleanUrl;

    if (profile.network.toLowerCase() === 'linkedin') {
      contactParts.push(`  \\faLinkedin\\ \\href{${profile.url}}{${escapeLaTeX(label)}}`);
    } else if (profile.network.toLowerCase() === 'github') {
      contactParts.push(`  \\faGithub\\ \\href{${profile.url}}{${escapeLaTeX(label)}}`);
    } else {
      contactParts.push(`  \\faGlobe\\ \\href{${profile.url}}{${escapeLaTeX(label)}}`);
    }
  });

  lines.push(contactParts.join(' \\textbar\\ \n'));
  lines.push('}');
  lines.push('');
  lines.push('\\vspace{1em}');
  lines.push('{\\color{AccentColor}\\hrule height 2pt}');
  lines.push('\\vspace{1em}');

  return lines.join('\n');
}

/**
 * Generate summary/introduction section
 */
function generateSummary(summary?: string): string {
  if (!summary) return '';

  return `\\section{Introduction}

${escapeLaTeX(summary)}`;
}

/**
 * Generate education section (for RIGHT column)
 */
function generateEducationSection(education: ResumeData['education']): string {
  if (!education || education.length === 0) return '';

  const entries = education.map((edu, index) => {
    const dateRange = formatDateRange(edu.startDate, edu.endDate);
    const degree = `${edu.studyType} of ${edu.area}`;

    const details: string[] = [];
    if (edu.note) details.push(edu.note);
    if (edu.gpa) details.push(edu.gpa);

    const detailsStr = details.length > 0 ? `\n{\\small ${details.join(' | ')}}` : '';

    const divider = index < education.length - 1 ? '\n\\cvdivider' : '';

    return `\\cvevent{${escapeLaTeX(degree)}}{${escapeLaTeX(edu.institution)}}{${dateRange}}{${escapeLaTeX(edu.location)}}${detailsStr}${divider}`;
  });

  return `\\section{Education}

${entries.join('\n\n')}`;
}

/**
 * Generate work experience section (for LEFT column)
 */
function generateExperienceSection(work: ResumeData['work']): string {
  if (!work || work.length === 0) return '';

  const entries = work.map((job, index) => {
    const dateRange = formatDateRange(job.startDate, job.endDate);
    const highlights = job.highlights && job.highlights.length > 0
      ? '\n' + arrayToCompactItemize(job.highlights)
      : '';

    const divider = index < work.length - 1 ? '\n\\cvdivider' : '';

    return `\\cvevent{${escapeLaTeX(job.position)}}{${escapeLaTeX(job.company)} â€” ${escapeLaTeX(job.type)}}{${dateRange}}{${escapeLaTeX(job.location)}}${highlights}${divider}`;
  });

  return `\\section{Experience}

${entries.join('\n\n')}`;
}

/**
 * Generate projects section (for LEFT column)
 */
function generateProjectsSection(projects: ResumeData['projects']): string {
  if (!projects || projects.length === 0) return '';

  const entries = projects.map((project, index) => {
    // Project name as regular text (not clickable)
    const projectTitle = `\\textbf{\\color{TextColor}${escapeLaTeX(project.name)}}`;

    // Add a clear "LINK" after description if URL is available
    const linkPart = project.url
      ? ` [\\href{${escapeURL(project.url)}}{\\color{AccentColor}\\textbf{LINK}}]`
      : '';

    const highlights = project.highlights && project.highlights.length > 0
      ? '\n' + arrayToCompactItemize(project.highlights)
      : '';

    const divider = index < projects.length - 1 ? '\n\\cvdivider' : '';

    return `${projectTitle}\\\\
{\\color{PrimaryColor}\\textit{${escapeLaTeX(project.description)}}}${linkPart}${highlights}${divider}`;
  });

  return `\\section{Recent Projects / Open-Source}

${entries.join('\n\n')}`;
}

/**
 * Generate skills section (for RIGHT column)
 */
function generateSkillsSection(skills: ResumeData['skills']): string {
  if (!skills || skills.length === 0) return '';

  const entries = skills.map((skill) => {
    const tags = skill.keywords.map(keyword => `\\cvtag{${escapeLaTeX(keyword)}}`).join('');
    return `\\cvsubsection{${escapeLaTeX(skill.name)}}
\\noindent\\raggedright
${tags}
\\par`;
  });

  return `\\section{Skills}

${entries.join('\n\n')}`;
}

/**
 * Generate achievements section (for RIGHT column)
 */
function generateAchievementsSection(achievements: string[]): string {
  if (!achievements || achievements.length === 0) return '';

  const items = achievements.map(achievement => `  \\item ${escapeLaTeX(achievement)}`).join('\n');

  return `\\section{Achievements \\& Communities}

\\begin{itemize}
${items}
\\end{itemize}`;
}

/**
 * Generate certifications section (for RIGHT column)
 */
function generateCertificationsSection(certifications: string[]): string {
  if (!certifications || certifications.length === 0) return '';

  // Group certifications by category
  const coreDevCerts: string[] = [];
  const frameworkCerts: string[] = [];
  const databaseCerts: string[] = [];
  const toolsCerts: string[] = [];
  const otherCerts: string[] = [];

  certifications.forEach(cert => {
    const lowerCert = cert.toLowerCase();
    if (lowerCert.includes('frontend') || lowerCert.includes('software engineer') || lowerCert.includes('problem solving')) {
      coreDevCerts.push(cert);
    } else if (lowerCert.includes('react') || lowerCert.includes('angular') || lowerCert.includes('node') || lowerCert.includes('javascript') || lowerCert.includes('java') || lowerCert.includes('go')) {
      frameworkCerts.push(cert);
    } else if (lowerCert.includes('sql') || lowerCert.includes('data') || lowerCert.includes('rest api')) {
      databaseCerts.push(cert);
    } else if (lowerCert.includes('github') || lowerCert.includes('docker') || lowerCert.includes('ubuntu') || lowerCert.includes('agile') || lowerCert.includes('system') || lowerCert.includes('project') || lowerCert.includes('cyber')) {
      toolsCerts.push(cert);
    } else {
      otherCerts.push(cert);
    }
  });

  const sections: string[] = [];

  if (coreDevCerts.length > 0) {
    sections.push(`\\cvsubsection{Core Development}
\\noindent\\raggedright
${coreDevCerts.map(c => `\\cvtag{${escapeLaTeX(c)}}`).join('')}
\\par`);
  }

  if (frameworkCerts.length > 0) {
    sections.push(`\\cvsubsection{Frameworks \\& Languages}
\\noindent\\raggedright
${frameworkCerts.map(c => `\\cvtag{${escapeLaTeX(c)}}`).join('')}
\\par`);
  }

  if (databaseCerts.length > 0) {
    sections.push(`\\cvsubsection{Database \\& API}
\\noindent\\raggedright
${databaseCerts.map(c => `\\cvtag{${escapeLaTeX(c)}}`).join('')}
\\par`);
  }

  if (toolsCerts.length > 0) {
    sections.push(`\\cvsubsection{Development Tools \\& Practices}
\\noindent\\raggedright
${toolsCerts.map(c => `\\cvtag{${escapeLaTeX(c)}}`).join('')}
\\par`);
  }

  if (otherCerts.length > 0) {
    sections.push(`\\noindent\\raggedright
${otherCerts.map(c => `\\cvtag{${escapeLaTeX(c)}}`).join('')}
\\par`);
  }

  return `\\section{Certifications}

${sections.join('\n\n')}`;
}
